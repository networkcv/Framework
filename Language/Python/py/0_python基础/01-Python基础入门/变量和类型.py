"""
 变量和类型
在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。

- 整型：Python中可以处理任意大小的整数（Python 2.x中有`int`和`long`两种类型的整数，但这种区分对Python来说意义不大，
因此在Python 3.x中整数只有int这一种了），而且支持二进制（如`0b100`，换算成十进制是4）、八进制（如`0o100`，换算成十进制是64）、十进制（`100`）和十六进制（`0x100`，换算成十进制是256）的表示法。
- 浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如`123.456`）之外还支持科学计数法（如`1.23456e2`）。
- 字符串型：字符串是以单引号或双引号括起来的任意文本，比如`'hello'`和`"hello"`,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。
- 布尔型：布尔值只有`True`、`False`两种值，要么是`True`，要么是`False`，在Python中，可以直接用`True`、`False`表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如`3 < 5`会产生布尔值`True`，而`2 == 1`会产生布尔值`False`）。
- 复数型：形如`3+5j`，跟数学上的复数表示一样，唯一不同的是虚部的`i`换成了`j`。实际上，这个类型并不常用，大家了解一下就可以了。
"""
import platform

print(platform.python_version())

"""
多行注释
"""
int_a = 10012321321321318787878
int_aa = 1.1
print(type(int_a))
print(type(int_aa))

str_b = 'str'
str_c = "str"
print(type(str_b))
print(type(str_c))

bool_d = True
print(type(bool_d))

"""
- `int()`：将一个数值或字符串转换成整数，可以指定进制。
- `float()`：将一个字符串转换成浮点数。
- `str()`：将指定的对象转换成字符串形式，可以指定编码。
- `chr()`：将整数转换成该编码对应的字符串（一个字符）。
- `ord()`：将字符串（一个字符）转换成对应的编码（整数），
这个编码是unicode中对应的数值，unicode相当于完整的编码集，每个编码都由两个字节构成，而UTF-8是一种可变长的编码方式，它规定ASCII码用一个字节表示，汉字用三个字节表示。
"""
print(str(1))
print(ord('a'))
print(chr(97))

"""
运算符
`[]` `[:]`下标，切片
`**`指数
`*` `/` `%` `//`乘，除，模，整除
"""
print(10 / 3)
print(10 % 3)
print(10 // 3)

"""
打印的占位符
.2 表示截切2位
类似于java的log日志打印
"""
print("%.2s is girl" % "abc")
str_name = "aaa"
print("%.2s is girl" % str_name)
print("%.2s is %s" % ("abc", str_name))

f = 1
c = 2
print(f'{f:.1f}华氏度 = {c:.1f}摄氏度')

"""
input 输入函数
"""
radius = float(input('请输入圆的半径: '))
perimeter = 2 * 3.1416 * radius
area = 3.1416 * radius * radius
print('周长: %.2f' % perimeter)
print('面积: %.2f' % area)

"""
字符串格式
我们可以使用辅助符号"m.n"来控制数据的宽度和精度,先精度再宽度，宽度不足补空格
m，控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效
.n，控制小数点精度，要求是数字，会进行小数的四舍五入
示例：
%5d：表示将整数的宽度控制在5位，如数字11，被设置为5d，就会变成：[空格][空格空格]11，用三个空格补足
宽度。
%5.2f：表示将宽度控制为5，将小数点精度设置为2
小数点和小数部分也算入宽度计算。如，对11.345设置了％7.2f后，结果是：[空格]空格111.35。2个空格补足宽
心
度，小数部分限制2位精度后，四舍五入为.35
"""

"""
f"字符串内容{变量名称}"
"""
name = "LWJ"
print(f' name is {name}')

"""
转译字符

1.字符串前加 u：后面字符串以 unicode 格式进行编码（表示中文），一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。
    【不是仅仅是针对中文, 可以针对任何的字符串，代表是对字符串进行unicode编码。一般英文字符在使用各种编码下, 基本都可以正常解析, 所以一般不带u；
    但是中文, 必须表明所需编码, 否则一旦编码转换就会出现乱码。 建议所有编码方式采用utf8】
    使用场景：一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。
2.字符串前加 r：在字符串前加r可防止字符串转义
    r"" 的作用是：去除转义字符
    ①字符串常量，在字符串前加r，场景：想复制某个文件夹的目录，假设是 F:\Python_Easy\n4\test.py
        当不用 r"" ，有三种写法：
        print("F:\Python_Easy\n4\test.py ")
        print("F:\\Python_Easy\\n4\\test.py ")
        print("F:/Python_Easy/n4/test.py ")
        运行结果：
        F:\Python_Easy4 est.py 
        F:\Python_Easy\n4\test.py 
        F:/Python_Easy/n4/test.py
        而通常如果直接复制目录路径的话，你就粘贴出来的字符串就是第一行代码所示，所有 \ 会当成转义符；而为了消除转义作用，需要手动再加一个 \ ，否则你也得手动改成何第三行代码一样。而 r"" 的出现就是为了避免这种情况。
    ②如果字符串是从文件中读取，则在读取时加r
        例如：有文件 test.txt中有 adfdfasd\tfdsadf\t E:\codes 则代码可以这么写：
         file1=open(r"text.txt","r") for line in file1: print(line) 
         结果为： adfdfasd\tfdsadf\t E:\codes
3.字符串前加 b：b" "前缀表示：后面字符串是bytes类型【 b' ' 表示后面的字符串是bytes 对象】。
    网络编程中，服务器和浏览器只认bytes 类型数据。
    在 Python3 中，bytes 和 str 的互相转换方式：
    str--->bytes:【str.encode('utf-8')】
    bytes--->str:【bytes.decode('utf-8')】
    举例：
        print("中文".encode(encoding="utf-8"))
        print(b'\xe4\xb8\xad\xe6\x96\x87'.decode())
        print(r'\xe4\xb8\xad\xe6\x96\x87')
    运行结果：
    b'\xe4\xb8\xad\xe6\x96\x87'
    中文
    \xe4\xb8\xad\xe6\x96\x87
    
    可以看到，当你不加 b"" 时，他也就是个普通的字符串而已，不会识别为字节类型。bytes数据类型应用场景：像图片、音视频等文件的读写就是用bytes数据。

4.字符串前加 f：以f开头表示在字符串内支持大括号内的python 表达式
    作用：相当于 format 函数。
    例如：
    name = "帅哥"age = 12print(f"my name is {name},age is {age}")
    运行结果：
    my name is 帅哥,age is 12

"""
