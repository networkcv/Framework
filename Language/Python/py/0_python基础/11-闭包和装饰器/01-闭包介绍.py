# 闭包的定义: 在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数称为闭包。

"""
通过闭包的定义，我们可以得知闭包的形成条件:
1.在函数嵌套(函数里面再定义函数)的前提下
2.内部函数使用了外部函数的变量(还包括外部函数的参数)
3.外部函数返回了内部函数
"""


# 定义一个外部函数
def func_out(num1):
    # 定义一个内部函数
    def func_inner(num2):
        # 内部函数使用了外部函数的变量(num1)
        result = num1 + num2
        print("结果是:", result)

    # 外部函数返回了内部函数，这里返回的内部函数就是闭包
    return func_inner


# 创建闭包实例
f = func_out(1)
# 执行闭包
f(2)  # 3
f(3)  # 4


# 通过上面的输出结果可以看出闭包保存了外部函数内的变量num1，每次执行闭包都是在num1 = 1 基础上进行计算。


# 4. 闭包的作用
# 闭包可以保存外部函数内的变量，不会随着外部函数调用完而销毁。
# 注意点:
# 由于闭包引用了外部函数的变量，则外部函数的变量没有及时释放，消耗内存。

# 5. 小结
# 当返回的内部函数使用了外部函数的变量就形成了闭包
# 闭包可以对外部函数的变量进行保存
# 实现闭包的标准格式:

# 外部函数
def test1(a):
    b = 10

    # 内部函数
    def test2():
        # 内部函数使用了外部函数的变量或者参数
        print(a, b)

    # 返回内部函数, 这里返回的内部函数就是闭包实例
    return test2


inner = test1(123)
inner()
