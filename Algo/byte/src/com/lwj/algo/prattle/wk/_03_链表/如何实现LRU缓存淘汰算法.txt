一、什么是链表？
    1.和数组一样，链表也是一种线性表。
    2.从内存结构来看，链表的内存结构是不连续的内存空间，是将一组零散的内存块串联起来，从而进行数据存储的数据结构。
    3.链表中的每一个内存块被称为结点Node。结点除了存储数据外，还需记录链上下一个结点的地址，即后继指针next。
二、为什么使用链表？即链表的特点
    1.插入、删除数据效率高O(1)级别（只需更改指针指向即可），随机访问效率低O(n)级别（需要从链头至链尾进行遍历）。
    2.和数组相比，内存空间消耗更大，因为每个存储数据的结点都需要额外的空间存储后继指针。
三、常用链表：单链表、循环链表和双向链表
    1.单链表
        1）每个结点只包含一个指针，即后继指针。
        2）单链表有两个特殊的结点，即首结点和尾结点。为什么特殊？用首结点地址表示整条链表，尾结点的后继指针指向空地址null。
        3）性能特点：插入和删除结点的时间复杂度为O（1），查找的时间复杂度为O(n)。
    2.循环链表
        1）除了尾结点的后继指针指向首结点的地址外均与单链表一致。
        2）适用于存储有循环特点的数据，比如约瑟夫问题。
    3.双向链表
        1）结点除了存储数据外，还有两个指针分别指向前一个结点地址（前驱指针prev）和下一个结点地址（后继指针next）。
        2）首结点的前驱指针prev和尾结点的后继指针均指向空地址。
    3）性能特点：
        和单链表相比，存储相同的数据，需要消耗更多的存储空间。
        插入、删除操作比单链表效率更高O(1)级别。以删除操作为例，删除操作分为2种情况：给定数据值删除对应结点和给定结点地址删除结点。对于前一种情况，单链表和双向链表都需要从头到尾进行遍历从而找到对应结点进行删除，时间复杂度为O(n)。对于第二种情况，要进行删除操作必须找到前驱结点，单链表需要从头到尾进行遍历直到p->next = q，时间复杂度为O(n)，而双向链表可以直接找到前驱结点，时间复杂度为O(1)。
        对于一个有序链表，双向链表的按值查询效率要比单链表高一些。因为我们可以记录上次查找的位置p，每一次查询时，根据要查找的值与p的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。
    4.双向循环链表：首结点的前驱指针指向尾结点，尾结点的后继指针指向首结点。
四、选择数组还是链表？
    1.插入、删除和随机访问的时间复杂度
        数组：插入、删除的时间复杂度是O(n)，随机访问的时间复杂度是O(1)。
        链表：插入、删除的时间复杂度是O(1)，随机访问的时间复杂端是O(n)。
    2.数组缺点
        1）若申请内存空间很大，比如100M，但若内存空间没有100M的连续空间时，则会申请失败，尽管内存可用空间超过100M。
        2）大小固定，若存储空间不足，需进行扩容，一旦扩容就要进行数据复制，而这时非常费时的。
    3.链表缺点
        1）内存空间消耗更大，因为需要额外的空间存储指针信息。
        2）对链表进行频繁的插入和删除操作，会导致频繁的内存申请和释放，容易造成内存碎片，如果是Java语言，还可能会造成频繁的GC（自动垃圾回收器）操作。
    4.如何选择？
        数组简单易用，在实现上使用连续的内存空间，可以借助CPU的缓冲机制预读数组中的数据，所以访问效率更高，而链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法预读。
        如果代码对内存的使用非常苛刻，那数组就更适合。
五、应用
    1.如何分别用链表和数组实现LRU缓冲淘汰策  略？
        1）什么是缓存？
            缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。
        2）为什么使用缓存？即缓存的特点
            缓存的大小是有限的，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？就需要用到缓存淘汰策略。
        3）什么是缓存淘汰策略？
            指的是当缓存被用满时清理数据的优先顺序。
        4）有哪些缓存淘汰策略？
            常见的3种包括先进先出策略FIFO（First In，First Out）、最少使用策略LFU（Least Frenquently Used）、最近最少使用策略LRU（Least Recently Used）。
        5）链表实现LRU缓存淘汰策略
            当访问的数据没有存储在缓存的链表中时，直接将数据插入链表表头，时间复杂度为O(1)；当访问的数据存在于存储的链表中时，将该数据对应的结点，插入到链表表头,时间复杂度为O(n)。如果缓存被占满，则从链表尾部的数据开始清理，时间复杂度为O(1)。
        6）数组实现LRU缓存淘汰策略
                方式一：首位置保存最新访问数据，末尾位置优先清理
            当访问的数据未存在于缓存的数组中时，直接将数据插入数组第一个元素位置，此时数组所有元素需要向后移动1个位置，时间复杂度为O(n)；当访问的数据存在于缓存的数组中时，查找到数据并将其插入数组的第一个位置，此时亦需移动数组元素，时间复杂度为O(n)。缓存用满时，则清理掉末尾的数据，时间复杂度为O(1)。
                方式二：首位置优先清理，末尾位置保存最新访问数据
            当访问的数据未存在于缓存的数组中时，直接将数据添加进数组作为当前最有一个元素时间复杂度为O(1)；当访问的数据存在于缓存的数组中时，查找到数据并将其插入当前数组最后一个元素的位置，此时亦需移动数组元素，时间复杂度为O(n)。缓存用满时，则清理掉数组首位置的元素，且剩余数组元素需整体前移一位，时间复杂度为O(n)。（优化：清理的时候可以考虑一次性清理一定数量，从而降低清理次数，提高性能。）
    2.如何通过单链表实现“判断某个字符串是否为回文字符串”？（比如 上海自来水来自海上）
        1）前提：字符串以单个字符的形式存储在单链表中。
        2）遍历链表，判断字符个数是否为奇数，若为偶数，则不是。
        3）将链表中的字符倒序存储一份在另一个链表中。
        4）同步遍历2个链表，比较对应的字符是否相等，若相等，则是水仙花字串，否则，不是。
六、设计思想
    时空替换思想：“用空间换时间” 与 “用时间换空间”
    当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高，时间复杂度小相对较低的算法和数据结构，缓存就是空间换时间的例子。如果内存比较紧缺，比如代码跑在手机或者单片机上，这时，就要反过来用时间换空间的思路。