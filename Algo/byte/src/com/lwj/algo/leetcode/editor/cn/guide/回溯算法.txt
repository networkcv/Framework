回溯算法其实是一种暴力枚举的算法。可以细分为 子集型回溯、组合型回溯、排列型回溯。解题思路从输入角度看是选或者不选，从答案的角度看则是枚举选哪个。
子集型回溯：每个元素只有两种状态，选或者不选，比如集合右两个元素，第一个元素选或者不选，第二个元素选或者不选。解题思路优先考虑 输入角度
组合型回溯：相比子集型回溯，可以做一些剪枝优化
排列型回溯：组合是不区分先后顺序的，而排列会考虑先后顺序，排列型的递归树会比组合型的递归树完整，解题思路优先考虑 答案角度

回溯三问：
1.当前操作？
2.子问题？
3.下一个子问题？

子集型回溯：
17. 电话号码的字母组合
以这个为例,用一个path数组记录路径上的字母
1.当前操作？枚举path[i]要填入的字母
2.子问题？构造字符串>=i的部分
3.下一个子问题？构造字符串>=i+1的部分

78. 子集
站在输入的视角，每个元素可以在子集中也可以不在子集中，每个节点都表示当前及祖先选择（选/不选）的结果，每两个节点之间的连线表示选择的动作，那么最终叶子节点就是答案
1.当前操作？枚举第i个数选/不选
2.子问题？从下标>=i的数字中构造子集
3.下一个子问题？从下标>=i+1的数字中构造子集

站在答案的视角，每次必选一个元素，每成功选择一个元素就往res中添加一个结果，同时为了防止重复，对于选择元素的要求需要大于上一个元素的下标。
1.当前操作？枚举一个下标j>=i的数字，加入path
2.子问题？从下标>=i的数字中构造子集
3.下一个子问题？从下标>=j+1的数字中构造子集

131. 分割回文串
用答案视角来做，枚举第一个逗号出现的位置（或者没有）
1.当前操作？ 选择回文串s[i..j]，加入path
2.子问题？从下标>=i的位置构造回文分割
3.下一个子问题？从下标>=j+1的位置构造回文分割

输入的视角，将"aab"看成 "a，a，b，"，每次i表示逗号的位置索引，也就是分割的位置，这里有个特殊的是b后边这个逗号的分割是必选的


课后作业：
257. 二叉树的所有路径 https://leetcode.cn/problems/binary-tree-paths/ 回溯+复习前面学的二叉树递归
113. 路径总和 II https://leetcode.cn/problems/path-sum-ii/ 回溯+复习前面学的二叉树递归
784. 字母大小写全排列 https://leetcode.cn/problems/letter-case-permutation/
LCP 51. 烹饪料理 https://leetcode.cn/problems/UEcfPD/
2397. 被列覆盖的最多行数 https://leetcode.cn/problems/maximum-rows-covered-by-columns/
1239. 串联字符串的最大长度 https://leetcode.cn/problems/maximum-length-of-a-concatenated-string-with-unique-characters/
2212. 射箭比赛中的最大得分 https://leetcode.cn/problems/maximum-points-in-an-archery-competition/
2698. 求一个整数的惩罚数 https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/
306. 累加数 https://leetcode.cn/problems/additive-number/
93. 复原 IP 地址 https://leetcode.cn/problems/restore-ip-addresses/

组合型回溯：
在回溯的基础上进行减枝优化
77. 组合
当剩余可选的数字<还至少需要的数字 后续的情况就不用递归了，一定是不满足条件的，这个就是剪枝
当判断剩余可选数字时，倒叙遍历的表达式要比正序遍历简单
倒叙：当前遍历的元素是i，那么当前剩余可选数字也是i
正序：当前遍历的元素是i，那么当前剩余可选数字等于 n（总数）-i（当前已遍历元素）+1
时间复杂度=符合要求的叶子节点个数C(n,k) 乘以 根节点的叶子节点的路径长度k=k*C(n,k)
空间复杂度=O(k)

216. 组合总和 III

22. 括号生成
输入视角：n对括号的组合，可以转换为2n个位置选n个位置来设置左括号

39. 组合总和

301. 删除无效的括号
输入视角：dfs定义是遍历每个元素位置，判断是否删除
先分别求出至少要删除的左括号数量和右括号数量，方便后续给选择（删除当前位置）的情况剪枝
剪枝情况：if (left + right > s.length() - i) return;//剩余字符数量无法凑够删除数量，直接return
上边这个判断是包含了当i==length的情况，如果一直都不选，那么总会有 left + right > s.length()的情况



排列型回溯：
时间复杂度还是最底层的叶子节点个数(n!) * 根节点到叶子节点的路径长度 = O((n*n!)
46. 全排列

51. N 皇后
N皇后问题可以看成排列型回溯的一种，使用答案视角，遍历每行放皇后的位置，如果满足条件到最后一行就可以返回一个子结果。
判断行、列、以及斜线是否合规，有个技巧是，(1,2)和(2，3)位于同一斜线，那么两点一定满足 column-row 相等，同理 (2,3)和(1,4)位于同一斜线，
那么两点一定满足 column+row相等。所以如果 c - r == column - row || c + r == column + row 那么一定不满足queue的位置条件
（1，2） （1，3） （1，4）
        （2，3）

52. N 皇后 II https://leetcode.cn/problems/n-queens-ii/solution/hui-su-miao-sha-nhuang-hou-yi-ge-shi-pin-l41l

课后作业：
357. 统计各位数字都不同的数字个数 https://leetcode.cn/problems/count-numbers-with-unique-digits/
2850. 将石头分散到网格图的最少移动次数 https://leetcode.cn/problems/minimum-moves-to-spread-stones-over-grid/
