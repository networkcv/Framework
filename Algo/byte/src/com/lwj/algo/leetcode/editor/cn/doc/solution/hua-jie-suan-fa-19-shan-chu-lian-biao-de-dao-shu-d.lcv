### 解题思路

- 标签：链表
- 整体思路是让前面的指针先移动`n`步，之后前后指针共同移动直到前面的指针到尾部为止
- 首先设立预先指针 pre，预先指针是一个小技巧，在第2题中进行了讲解
- 设预先指针 `pre` 的下一个节点指向 `head`，设前指针为 `start`，后指针为 `end`，二者都等于 `pre`
- `start` 先向前移动n步
- 之后 `start` 和 `end` 共同向前移动，此时二者的距离为 `n`，当 `start` 到尾部时，`end` 的位置恰好为倒数第 `n` 个节点
- 因为要删除该节点，所以要移动到该节点的前一个才能删除，所以循环结束条件为 `start.next != null`
- 删除后返回 `pre.next`，为什么不直接返回 `head` 呢，因为 `head` 有可能是被删掉的点
- 时间复杂度：$O(n)$

### 代码

* []

```Java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {    
        ListNode pre = new ListNode(0);
        pre.next = head;
        ListNode start = pre, end = pre;
        while(n != 0) {
            start = start.next;
            n--;
        }
        while(start.next != null) {
            start = start.next;
            end = end.next;
        }
        end.next = end.next.next;
        return pre.next;
    }
}
```

### 画解

<![frame_00001.png](https://pic.leetcode-cn.com/b0f63c1cd7579a6cc5a9d38b2b3904d511348720c652a87fc01f33c99eec101e-frame_00001.png),![frame_00002.png](https://pic.leetcode-cn.com/ac4e918c85a0bcea631e23acd28bba3bbc2879df9ab47221f539919c151ec1ac-frame_00002.png),![frame_00003.png](https://pic.leetcode-cn.com/a0ca832f51a21fcacf5a714140b9300665ae7f92a3b41914644f0362ca39205c-frame_00003.png),![frame_00004.png](https://pic.leetcode-cn.com/3dfbbe995d58a746333c76cb669b00f2e638bb99d569483c0094d7484f21d6ed-frame_00004.png),![frame_00005.png](https://pic.leetcode-cn.com/c396dba540c869d13d3ef9753e095da1aa9c303c8c64ca6e6e87a3593b9d68c5-frame_00005.png),![frame_00006.png](https://pic.leetcode-cn.com/167efc977fa1f673c5a7e653ea5a3c7d7335f46b2a0754da2f6558ab991c0e22-frame_00006.png),![frame_00007.png](https://pic.leetcode-cn.com/7f9949e4526ac803fff50cc389765cc7ce9031e2ae39e3c56643fe7aac913991-frame_00007.png),![frame_00008.png](https://pic.leetcode-cn.com/58bb9a19a23fe8e17adad44749edc4214e3744f10c416dabc5f5bb537a24dcb3-frame_00008.png)>

想看大鹏画解更多高频面试题，欢迎阅读大鹏的 LeetBook：[《画解剑指 Offer 》](https://leetcode-cn.com/leetbook/detail/illustrate-lcof/)，O(∩_∩)O
