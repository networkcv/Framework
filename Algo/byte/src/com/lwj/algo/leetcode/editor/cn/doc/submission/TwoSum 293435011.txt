    class Solution {
        public int[] twoSum(int[] nums, int target) {
            //1.è¿­ä»£
//            return iteration(nums, target);
            //2.hash
            return hash(nums, target);
        }

        private int[] hash(int[] nums, int target) {
            HashMap<Integer, Integer> hashMap = new HashMap<>();
            for (int i = 0; i < nums.length; i++) {
                int num = target - nums[i];
                if (hashMap.containsKey(num)) {
                    return new int[]{hashMap.get(num), i};
                }
                hashMap.put(nums[i], i);
            }
            return null;
        }

        private int[] iteration(int[] nums, int target) {
            for (int i = 0; i < nums.length; i++) {
                for (int j = 0; j < nums.length; j++) {
                    if (nums[i] + nums[j] == target) {
                        return new int[]{i, j};
                    }
                }
            }
            return null;
        }
    }

//runtime:1 ms
//memory:41.3 MB
