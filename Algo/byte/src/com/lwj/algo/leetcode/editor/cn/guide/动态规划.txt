动态规划
https://www.bilibili.com/video/BV1Xj411K7oF/?vd_source=1c3ddffa7c4adab111124a27aaa320a6&spm_id_from=333.788.videopod.sections
db分为多种类型：
    dp类型-选或不选
        子类型1: 0-1背包
        子类型2: 完全背包
        子类型3: 常见变形

dp三步：
1.思考回溯要怎么写
    a.入参和返回值
    b.递归到哪里
    c.递归边界和入口
2.改成记忆化搜索
    递归搜索 + 保存计算结果 = 记忆化搜索
    因为搜索的节点中可能会存在重复性的搜索，可以通过把这些搜索结果缓存下来，加快整体的搜索速度，就是记忆化搜索
3.翻译成递推
    a.dfs->f数组
    b.递归->循环
    c.递归边界->数组初始值

    记忆化搜索=自顶向下算
    递推=自底向上算
    例如打家劫舍中 cache[i] = Math.max(dfs2(i - 1, nums), dfs2(i - 2, nums) + nums[i]);
    看这句话，当前子问题的解是通过里边两个dfs函数返回后才进行计算的，调用函数是递归中递的过程，函数返回是递归中归的过程。假设当前子问题i=2，
    那当前子问题可以直接由i=1的子问题和i=0的子问题+nums[2]来解决掉,那如果nums[0]和nums[1]已知，就能推出nums[2],然后通过nums[2]和nums[1]
    又能推出nums[3]，一直到推到结束，递推就是省略掉递的过程，直接从已知子问题推导出所有的未知子问题的过程


198. 打家劫舍
回溯三问
通过 当前操作 将 当前问题 转换为 当前子问题，然后再将当前子问题的的求解，转换成求解下一个子问题
（这里个人再补充一个0.当前问题：从i个房子中取得最大金额和）
1.当前操作：枚举 第i 个房子选或不选
2.当前子问题：从 前i 个房子中获取最大金额和
3.下一个子问题：分类讨论
    不选：从 前i-1 个房子中获取最大金额和
    选：从 前i-2 个房子中获取最大金额和
解法一：回溯版-暴力回溯，时间复杂度O(N*2^N),空间复杂度O(N)
解法二：回溯版-dfs返回当前问题解,时间复杂度O(N*2^N),空间复杂度O(1)
解法三：回溯版-记忆化搜索，增加数组缓存子问题答案优化效率，时间负责度为O(N),空间复杂度为O(N)，时间复杂度的计算方式是状态个数O(N)乘单个状态所需的计算时间O(1)
解法四：递推版-这里需要注意处理dp数组的初始值，可以手动将设置初始值，也可以扩大dp数组长度。时间负责度为O(N),空间复杂度为O(N)
解法五：递推版-空间优化版，时间负责度为O(N),空间复杂度为O(1)

课后作业：
70. 爬楼梯 https://leetcode.cn/problems/climbing-stairs/
746. 使用最小花费爬楼梯 https://leetcode.cn/problems/min-cost-climbing-stairs/
377. 组合总和 Ⅳ https://leetcode.cn/problems/combination-sum-iv/
2466. 统计构造好字符串的方案数 https://leetcode.cn/problems/count-ways-to-build-good-strings/
2266. 统计打字方案数 https://leetcode.cn/problems/count-number-of-texts/
740. 删除并获得点数 https://leetcode.cn/problems/delete-and-earn/
213. 打家劫舍 II https://leetcode.cn/problems/house-robber-ii/
64. 最小路径和 https://leetcode.cn/problems/minimum-path-sum/


dp类型-选或不选
子类型1: 0-1背包
    回溯
    记忆化搜索
    递推
    空间优化：两个数组
    空间优化：一个数组
494. 目标和 https://leetcode.cn/problems/target-sum/solution/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-s1cx/
给nums[]的每个元素前加上+或-运算后等于target
假设所有加+号的数的和是p，那么所有加-号的数字和等于，sum(nums)-p，
target=正数和-负数和  target=p-[sum(nums)-p]  2p=target+sum(nums)  p=[target+sum(nums)]/2  由此判断target+sum(nums) 一定是偶数
该问题可以转换成从nums[]中选出一些数字，使这些数组和等于target+sum(nums)
解法一：回溯版-暴力回溯
解法二：递推版
dfs(cur,target)=dfs(cur-1,target)+dfs(cur-1,target-nums[cur])
dfs函数转f数组 （dfs的参数好类比数组的纬度，dfs的函数返回值类比数组中存放的元素，相当于用数组把整个函数的调用给缓存起来，然后根据边界条件推导出整个数组）
f[cur][target]=f[cur-1][target]+f[cur-1][target-nums[cur]]
由于上边的cur等于0时，cur-1为-1，会在数组取值时报错，可以整体向后延一位，变成：
f[cur+1][target]=f[cur][target]+f[cur][target-nums[cur]]




子类型2: 完全背包
322. 零钱兑换 https://leetcode.cn/problems/coin-change/solution/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-21m5/

子类型3: 常见变形



课后作业：
2915. 和为目标值的最长子序列的长度 https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/
416. 分割等和子集 https://leetcode.cn/problems/partition-equal-subset-sum/
2787. 将一个数字表示成幂的和的方案数 https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/
518. 零钱兑换 II https://leetcode.cn/problems/coin-change-ii/
279. 完全平方数 https://leetcode.cn/problems/perfect-squares/

课后作业题解：
2915. 和为目标值的最长子序列的长度 https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/solution/mo-ban-qia-hao-zhuang-man-xing-0-1-bei-b-0nca/
416. 分割等和子集 https://leetcode.cn/problems/partition-equal-subset-sum/solution/0-1-bei-bao-cong-ji-yi-hua-sou-suo-dao-d-ev76/
518. 零钱兑换 II https://leetcode.cn/problems/coin-change-ii/solution/shi-pin-wan-quan-bei-bao-cong-ji-yi-hua-o3ew0/
279. 完全平方数 https://leetcode.cn/problems/perfect-squares/solution/dong-tai-gui-hua-cong-ji-yi-hua-sou-suo-3kz1g/