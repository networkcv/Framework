动态规划
https://www.bilibili.com/video/BV1Xj411K7oF/?vd_source=1c3ddffa7c4adab111124a27aaa320a6&spm_id_from=333.788.videopod.sections
db分为多种类型：
    dp类型-选或不选
        子类型1: 0-1背包
        子类型2: 完全背包
        子类型3: 常见变形

dp三步：
1.思考回溯要怎么写
    a.入参和返回值
    b.递归到哪里
    c.递归边界和入口
2.改成记忆化搜索
    递归搜索 + 保存计算结果 = 记忆化搜索
    因为搜索的节点中可能会存在重复性的搜索，可以通过把这些搜索结果缓存下来，加快整体的搜索速度，就是记忆化搜索
3.翻译成递推
    a.dfs->f数组
    b.递归->循环
    c.递归边界->数组初始值

    记忆化搜索=自顶向下算
    递推=自底向上算
    例如打家劫舍中 cache[i] = Math.max(dfs2(i - 1, nums), dfs2(i - 2, nums) + nums[i]);
    看这句话，当前子问题的解是通过里边两个dfs函数返回后才进行计算的，调用函数是递归中递的过程，函数返回是递归中归的过程。假设当前子问题i=2，
    那当前子问题可以直接由i=1的子问题和i=0的子问题+nums[2]来解决掉,那如果nums[0]和nums[1]已知，就能推出nums[2],然后通过nums[2]和nums[1]
    又能推出nums[3]，一直到推到结束，递推就是省略掉递的过程，直接从已知子问题推导出所有的未知子问题的过程

198. 打家劫舍
回溯三问
通过 当前操作 将 当前问题 转换为 当前子问题，然后再将当前子问题的的求解，转换成求解下一个子问题
（这里个人再补充一个0.当前问题：从i个房子中取得最大金额和）
1.当前操作：枚举 第i 个房子选或不选
2.当前子问题：从 前i 个房子中获取最大金额和
3.下一个子问题：分类讨论
    不选：从 前i-1 个房子中获取最大金额和
    选：从 前i-2 个房子中获取最大金额和
解法一：回溯版-暴力回溯，时间复杂度O(N*2^N),空间复杂度O(N)
解法二：回溯版-dfs返回当前问题解,时间复杂度O(N*2^N),空间复杂度O(1)
解法三：回溯版-记忆化搜索，增加数组缓存子问题答案优化效率，时间负责度为O(N),空间复杂度为O(N)，时间复杂度的计算方式是状态个数O(N)乘单个状态所需的计算时间O(1)
解法四：递推版-这里需要注意处理dp数组的初始值，可以手动将设置初始值，也可以扩大dp数组长度。时间负责度为O(N),空间复杂度为O(N)
解法五：递推版-空间优化版，时间负责度为O(N),空间复杂度为O(1)

课后作业：
70. 爬楼梯 https://leetcode.cn/problems/climbing-stairs/
746. 使用最小花费爬楼梯 https://leetcode.cn/problems/min-cost-climbing-stairs/
377. 组合总和 Ⅳ https://leetcode.cn/problems/combination-sum-iv/
2466. 统计构造好字符串的方案数 https://leetcode.cn/problems/count-ways-to-build-good-strings/
2266. 统计打字方案数 https://leetcode.cn/problems/count-number-of-texts/
740. 删除并获得点数 https://leetcode.cn/problems/delete-and-earn/
213. 打家劫舍 II https://leetcode.cn/problems/house-robber-ii/
64. 最小路径和 https://leetcode.cn/problems/minimum-path-sum/


## dp类型-选或不选
子类型1: 0-1背包
    回溯
    记忆化搜索
    递推
    空间优化：两个数组
    空间优化：一个数组
494. 目标和 https://leetcode.cn/problems/target-sum/solution/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-s1cx/
给nums[]的每个元素前加上+或-运算后等于target
假设所有加+号的数的和是p，那么所有加-号的数字和等于，sum(nums)-p，
target=正数和-负数和  target=p-[sum(nums)-p]  2p=target+sum(nums)  p=[target+sum(nums)]/2  由此判断target+sum(nums) 一定是偶数
该问题可以转换成从nums[]中选出一些数字，使这些数组和等于target+sum(nums)
解法一：回溯版-暴力回溯
解法二：递推版-二维数组
dfs(cur,target)=dfs(cur-1,target)+dfs(cur-1,target-nums[cur])
dfs函数转f数组 （dfs的参数好类比数组的纬度，dfs的函数返回值类比数组中存放的元素，相当于用数组把整个函数的调用给缓存起来，然后根据边界条件推导出整个数组）
f[cur][target]=f[cur-1][target]+f[cur-1][target-nums[cur]]
由于上边的cur等于0时，cur-1为-1，会在数组取值时报错，可以整体向后延一位，变成：
f[cur+1][target]=f[cur][target]+f[cur][target-nums[cur]]
解法三：递推版-空间优化 只有2行的二维数组
可以参考打家劫舍中，整个数组每次只用到了 i-1 和 i-2的元素下标，把这两个单独定义成变量，就可以避免使用整个长度N的数组
目标和也一样，二维数组中，其实每次只用到了df[i][]和dp[i-1][]这两行，可以把这多行的二维数组优化成只有两行的二维数组
解法四：递推版-空间优化 1个一维数组

子类型2: 完全背包
322. 零钱兑换 https://leetcode.cn/problems/coin-change/solution/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-21m5/

子类型3: 常见变形

课后作业：
2915. 和为目标值的最长子序列的长度 https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/
416. 分割等和子集 https://leetcode.cn/problems/partition-equal-subset-sum/
2787. 将一个数字表示成幂的和的方案数 https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/
518. 零钱兑换 II https://leetcode.cn/problems/coin-change-ii/
279. 完全平方数 https://leetcode.cn/problems/perfect-squares/

课后作业题解：
2915. 和为目标值的最长子序列的长度 https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/solution/mo-ban-qia-hao-zhuang-man-xing-0-1-bei-b-0nca/
416. 分割等和子集 https://leetcode.cn/problems/partition-equal-subset-sum/solution/0-1-bei-bao-cong-ji-yi-hua-sou-suo-dao-d-ev76/
518. 零钱兑换 II https://leetcode.cn/problems/coin-change-ii/solution/shi-pin-wan-quan-bei-bao-cong-ji-yi-hua-o3ew0/
279. 完全平方数 https://leetcode.cn/problems/perfect-squares/solution/dong-tai-gui-hua-cong-ji-yi-hua-sou-suo-3kz1g/


## 线性dp
1143. 最长公共子序列 LCS https://leetcode.cn/problems/longest-common-subsequence/solutions/2133188/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-lbz5/
子串,子数组是连续的，子序列不一定是连续的,公共子序列是两个字符串都有的子序列。
当s1[cur1]==s2[cur2]的时候，两个cur都往后减就行，不会出现dfs(cur1 - 1, cur2) 比 dfs(cur1, cur2)+1 还大的情况，最多也就是相等，例如“add”和“ad”
当s1[cur1]!=s2[cur2]的时候，只需要比较 Math.max(dfs1(cur1 - 1, cur2), dfs1(cur1, cur2 - 1))即可，不需要比较 dfs1(cur1 - 1, cur2 - 1)
是因为进入dfs1(cur1 - 1, cur2)后，如果不选cur1，选cur2的话会走 dfs1(cur1, cur2 - 1) 这一分支，这样就相当于 dfs1(cur1 - 1, cur2 - 1)了
递推版-一维数组:在二维数组中用到了 上方元素(cur1-1,cur2)，左边元素(cur1,cur2-1)，左上方元素(cur1-1,cur2-1)，如果二维变一维需要考虑元素覆盖问题

72. 编辑距离 https://leetcode.cn/problems/edit-distance/solutions/2133222/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-uo5q/
这个需要注意边界条件的判断

课后作业：
583. 两个字符串的删除操作 https://leetcode.cn/problems/delete-operation-for-two-strings/
712. 两个字符串的最小ASCII删除和 https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/
97. 交错字符串 https://leetcode.cn/problems/interleaving-string/
1458. 两个子序列的最大点积 https://leetcode.cn/problems/max-dot-product-of-two-subsequences/
1092. 最短公共超序列 https://leetcode.cn/problems/shortest-common-supersequence/

【基础算法精讲】题目+题解汇总：
https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/README.md

300. 最长递增子序列 https://leetcode.cn/problems/longest-increasing-subsequence/solution/jiao-ni-yi-bu-bu-si-kao-dpfu-o1-kong-jia-4zma/
思路一：回溯+递推+空间优化，需要注意的是递推公式不能简单的理解成dfs(i)=max(dfs(i-1))+1，例如这种情况[4,10,4,9]，当i=3时，前边的4的最大递增子序列是[4,10]，
长度是2，整个数组的最大递增子序列也是2,所以定义dfs(i)表示以nums[i]结尾的LIS长度，然后遍历数组取最大的LIS长度即为整个数组的最大LIS。
dfs(i)=max{dfs(j)}+1 且j<i and nums[j]<nums[i]
思路二：将原序列排序后去重，这样这个序列的任意子序列都是递增子序列，然后用排序去重后的序列跟原序列求最长公共子序列，这样获取的子序列也是最长递增子序列了。
思路三：交换状态与状态值,之前f[i]表示**末尾元素**为nums[i]的LIS的**长度**。
交互状态与状态值,g[i]表示**长度**为i+1的IS的**末尾元素**最小值。这样最终结果返回len(g[])就是LIS的长度。

递推公式的定义：
什么时候要把状态定义成【前 i 个元素】中的最优值，什么时候要把状态定义成【以第 i 个元素结束】的最优值？如果是 01 背包或者最长公共子序列 LCS 那种，
用【选或不选】思考的题目，要定义成【前 i 个元素】；如果是本节课讲的最长递增子序列 LIS 这种，用【枚举选哪个】思考的题目，要定义成【以第 i 个元素结束】。

课后作业：
2826. 将三个组排序 https://leetcode.cn/problems/sorting-three-groups/
1671. 得到山形数组的最少删除次数 https://leetcode.cn/problems/minimum-number-of-removals-to-make-mountain-array/
1964. 找出到每个位置为止最长的有效障碍赛跑路线 https://leetcode.cn/problems/find-the-longest-valid-obstacle-course-at-each-position/
673. 最长递增子序列的个数 https://leetcode.cn/problems/number-of-longest-increasing-subsequence/
1626. 无矛盾的最佳球队 https://leetcode.cn/problems/best-team-with-no-conflicts/
354. 俄罗斯套娃信封问题 https://leetcode.cn/problems/russian-doll-envelopes/
1187. 使数组严格递增 https://leetcode.cn/problems/make-array-strictly-increasing/


## 状态机dp
买卖股票的最佳时机(不限制交易次数)
122. 买卖股票的最佳时机 II https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solution/shi-pin-jiao-ni-yi-bu-bu-si-kao-dong-tai-o3y4/
309. 最佳买卖股票时机含冷冻期 https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/shi-pin-jiao-ni-yi-bu-bu-si-kao-dong-tai-0k0l/
买卖股票的最佳时机（限制交易次数）
121. 买卖股票的最佳时机 https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/
只能交易一次
思路一：枚举记录最小价格和最大收益

123. 买卖股票的最佳时机 III https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/
188. 买卖股票的最佳时机 IV https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/solution/shi-pin-jiao-ni-yi-bu-bu-si-kao-dong-tai-kksg/
最多n次


课后作业：

714. 买卖股票的最佳时机含手续费 https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
2826. 将三个组排序 https://leetcode.cn/problems/sorting-three-groups/
2786. 访问数组中的位置使分数最大 https://leetcode.cn/problems/visit-array-positions-to-maximize-score/
1911. 最大子序列交替和 https://leetcode.cn/problems/maximum-alternating-subsequence-sum/
