
    class Solution {
        //二叉树的最长直径是一个节点下，两个子树的最大深度之和
        public int diameterOfBinaryTree(TreeNode root) {
            if (root == null) {
                return 0;
            }
            int leftMax = maxDepth(root.left);
            int rightMax = maxDepth(root.right);

            return leftMax + rightMax;
        }

        public int maxDepth(TreeNode node) {
            if (node == null) {
                return 0;
            }
            int l = maxDepth(node.left);
            int r = maxDepth(node.right);
            int max = Math.max(l, r);
            return max + 1;
        }
    }

//total_testcases:104
//total_correct:100
//input_formatted:[4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]
//expected_output:8
//code_output:7
